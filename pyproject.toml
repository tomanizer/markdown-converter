[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "markdown-converter"
version = "0.1.0"
description = "A Python tool for converting various document formats to clean, readable markdown optimized for LLM processing"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Thomas", email = "thomas@example.com"}
]
keywords = ["markdown", "converter", "document", "llm", "pandoc"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Text Processing :: Markup",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.12"
dependencies = [
    "pypandoc>=1.11",
    "fsspec>=2023.0.0",
    "python-docx>=0.8.11",
    "pdfplumber>=0.9.0",
    "openpyxl>=3.1.0",
    "beautifulsoup4>=4.12.0",
    "extract-msg>=0.41.0",
    "pandas>=1.5.0",
    "tabulate>=0.9.0",
    "click>=8.1.0",
    "pyyaml>=6.0",
    "structlog>=23.0.0",
    "tenacity>=8.2.0",
    "psutil>=5.9.0",
    "multiprocessing-logging>=0.3.0",
    "diskcache>=5.6.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
    "types-PyYAML>=6.0.0",
    "types-requests>=2.28.0",
    "ipython>=8.0.0",
    "jupyter>=1.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    "pytest-benchmark>=4.0.0",
    "factory-boy>=3.2.0",
    "faker>=18.0.0",
    "coverage>=7.0.0",
    "memory-profiler>=0.60.0",
]

[project.scripts]
markdown-converter = "markdown_converter.cli:main"

[project.urls]
Homepage = "https://github.com/yourusername/markdown-converter"
Documentation = "https://markdown-converter.readthedocs.io"
Repository = "https://github.com/yourusername/markdown-converter"
"Bug Tracker" = "https://github.com/yourusername/markdown-converter/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"markdown_converter" = ["*.yaml", "*.yml", "*.json"]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["markdown_converter"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pandoc.*",
    "pypandoc.*",
    "fsspec.*",
    "pdfplumber.*",
    "openpyxl.*",
    "beautifulsoup4.*",
    "extract_msg.*",
    "click.*",
    "yaml.*",
    "structlog.*",
    "tenacity.*",
    "psutil.*",
    "diskcache.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "performance: marks tests as performance tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 